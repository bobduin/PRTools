%PDIST2 PRTools version of Matlab's PDIST2 for Octave usage
% 
%   D = PDIST2(A,B)
% 
% INPUT
%   A,B   Datasets or matrices
%
% OUTPUT
%   D     Euclidean distance dataset or matrix
%
% DESCRIPTION  
% Computation of the Euclidean distances D between two sets A and B. 
% If A has M objects and B has N objects, then D is [M x N]. If A and B are
% PRTools datasets, then D is a dataset as well with the labels defined by
% the labels of A and the feature labels defined by the labels of B. 
%
% 

% Copyright: R.P.W. Duin, r.p.w.duin@37steps.com
% Faculty EWI, Delft University of Technology
% P.O. Box 5031, 2600 GA Delft, The Netherlands

function D = distm(A,B)
  
  global DISTANCETYPE
  if isempty(DISTANCETYPE)
    DISTANCETYPE = {'SquaredEuclid'};
  end
    
  if nargin == 0
    D = prmapping(mfilename,'fixed');
    D = setuser(D,'pe_mapping','type'); % can handle pe_mappings
    return
  end
  
  if nargin < 2
    B = A;
  end
  %B = cdats(B,1);  % ???? why just labeled objects in B ?????
  
  [ma,ka] = size(A);
  [mb,kb] = size(B);
  
%   if (ka ~= kb)
%     error('Feature sizes should be equal')
%   end
  
  if isdatafile(A)
  
    D = zeros(ma,mb);
    next = 1;
    while next > 0
      [a,next,J] = readdatafile1(A,next);
      D(J,:) = +distm(a,B);
    end
    
  elseif isdatafile(B)

    D = zeros(ma,mb);
    next = 1;
    while next > 0  % we need another version of readdatafile here, as due
      [b,next,J] = readdatafile2(B,next); % to persistent variables double
      D(:,J) = +distm(A,b); % looping can not be handled correctly
    end
    
  else % A and B are not datafiles
    
    if ~isoctave
      % here the original code is replaced by a call to pdist2
      if strcmp(DISTANCETYPE,'SquaredEuclid')
        D = pdist2(+A,+B).^2;
      else
        type = lower(DISTANCETYPE{1});
        if numel(DISTANCETYPE) > 1
          D = pdist2(+A,+B,type,DISTANCETYPE{2:end});
        else
          D = pdist2(+A,+B,type);
        end
      end
    else
      % The order of operations below is good for the accuracy.
      testdatasize(ma*mb); % check memory sizes
      D = ones(ma,1)*sum(B'.*B',1);
      D = D + sum(A.*A,2)*ones(1,mb);
      D = D - 2 .* (+A)*(+B)';

      J = find(D<0);                  % Check for a numerical inaccuracy. 
      D(J) = zeros(size(J));          % D should be nonnegative.
    end
  
    if ((nargin < 2) && (ma == mb)) % take care of symmetric distance matrix
      D = (D + D')/2;              
      D([1:ma+1:ma*ma]) = zeros(1,ma);
    end
    
  end
  
  if isa(A,'prdataset')   % set object and feature labels
    if isa(B,'prdataset')
      D = setdata(A,D,getlab(B));
    else
      D = setdata(A,D);
    end
  end
    
return
